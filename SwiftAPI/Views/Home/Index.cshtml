@{
	ViewData["Title"] = "Home Page";
}

<style>
	select {
		width: 200px;
		padding: 12px 20px;
		margin: 8px 0;
		display: inline-block;
		border: 1px solid #ccc;
		border-radius: 4px;
		box-sizing: border-box;
	}

	#endpointUrl {
		width: 940px;
		padding: 12px 20px;
		margin: 8px 0;
		display: inline-block;
		border: 1px solid #ccc;
		border-radius: 4px;
		box-sizing: border-box;
	}

	button[type=submit] {
		width: 120px;
		background-color: #144891;
		color: white;
		padding: 14px 20px;
		margin: 8px 0;
		border: none;
		border-radius: 4px;
		cursor: pointer;
	}

	.secondPanel {
		margin-top: 10px;
		display: flex;
		gap: 10px;
	}

	.requestArea {
		width: 900px;
		height: 500px;
		color: black;
		border: 1px solid black;
		padding: 10px;
		font-size: 16px;
		resize: none;
	}

	/* .responseArea {
				width: 900px;
				height: 500px;
				color: black;
				border: 1px solid black;
				padding: 10px;
				font-size: 16px;
				resize: none;
			} */

	.secondPanel {
		margin-top: 10px;
		display: flex;
		gap: 10px;
	}

	.responseContainer {
		width: 900px;
		height: 500px;
		border: 1px solid black;
		display: flex;
		flex-direction: column;
	}

	.responseTabs {
		display: flex;
		border-bottom: 1px solid black;
	}

		.responseTabs button {
			flex: 1;
			padding: 10px;
			background-color: #f1f1f1;
			border: none;
			cursor: pointer;
			font-size: 16px;
		}

			.responseTabs button.active {
				color: white;
				background-color: #144891;
			}

	.responseContent {
		flex: 1;
		padding: 10px;
		overflow: auto;
		display: none;
	}

	.responseArea {
		width: 100%;
		height: 100%;
		color: black;
		border: none;
		font-size: 16px;
		resize: none;
	}

	.visible {
		display: block;
	}

	.requestContainer {
		width: 900px;
		height: 500px;
		border: 1px solid black;
		display: flex;
		flex-direction: column;
	}

	.requestTabs {
		display: flex;
		border-bottom: 1px solid black;
	}

		.requestTabs button {
			flex: 1;
			padding: 10px;
			background-color: #f1f1f1;
			border: none;
			cursor: pointer;
			font-size: 16px;
		}

			.requestTabs button.Reqactive {
				color: white;
				background-color: #144891;
			}

	.requestContent {
		flex: 1;
		padding: 10px;
		overflow: auto;
		display: none;
	}

	.requestArea {
		width: 100%;
		height: 100%;
		color: black;
		border: none;
		font-size: 16px;
		resize: none;
	}

	.visibleReq {
		display: block;
	}
	/*params styling*/
	/* .paramsContent {
			flex: 1;
			padding: 10px;
			overflow: auto;
			display: none;
		} */

	.paramsHeadersTable {
		width: 100%;
		border-collapse: collapse;
	}

		.paramsHeadersTable th,
		.paramsHeadersTable td {
			border: 1px solid black;
			padding: 8px;
			text-align: left;
		}

		.paramsHeadersTable th {
			background-color: #f1f1f1;
		}
	/* form data styling */
	.formDataTable {
		width: 100%;
		border-collapse: collapse;
	}

		.formDataTable th,
		.formDataTable td {
			border: 1px solid black;
			padding: 8px;
			text-align: left;
		}

		.formDataTable th {
			background-color: #f1f1f1;
		}
	/*response headers styling*/
	/* Table styles for headers */
	.headersTable {
		width: 100%;
		border-collapse: collapse;
	}

		.headersTable th,
		.headersTable td {
			border: 1px solid black;
			padding: 8px;
			text-align: left;
		}

		.headersTable th {
			background-color: #f1f1f1;
		}
	/*request headers styling*/

	.requestHeadersTable {
		width: 100%;
		border-collapse: collapse;
	}

		.requestHeadersTable th,
		.requestHeadersTable td {
			border: 1px solid black;
			padding: 8px;
			text-align: left;
		}

		.requestHeadersTable th {
			background-color: #f1f1f1;
		}
	/* Delete Button */
	.delete-row {
		background: none;
		border: none;
		cursor: pointer;
		font-size: 18px;
		color: #e74c3c;
		transition: 0.3s ease;
	}

		.delete-row:hover {
			color: #c0392b;
			transform: scale(1.1);
		}
	/*operations tabs styling*/
	.operationTabs {
		margin-top: 10px;
		overflow: hidden;
		border: 1px solid #ccc;
		background-color: #f1f1f1;
	}

		/* Style the buttons inside the tab */
		.operationTabs button {
			background-color: inherit;
			float: left;
			border: none;
			outline: none;
			cursor: pointer;
			padding: 14px 16px;
			transition: 0.3s;
			font-size: 17px;
		}

			/* Change background color of buttons on hover */
			.operationTabs button:hover {
				background-color: #ddd;
			}

			/* Create an active/current tablink class */
			.operationTabs button.active {
				background-color: #ccc;
			}

	/* Style the tab content */
	.tabcontent {
		display: none;
		padding: 6px 12px;
		border: 1px solid #ccc;
		border-top: none;
	}

	.closeTab {
		position: absolute;
		top: 165px;
		right: 160px;
		cursor: pointer;
		font-size: 18px;
		font-weight: bold;
		color: black;
	}

</style>
<div class="container">
	<div class="firstPanel">
		@* <label>API Endpoint : </label> *@
		<form>
			<select id="httpMethods" name="methods">
				<option value="get">GET</option>
				<option value="post">POST</option>
				<option value="put">PUT</option>
				<option value="patch">PATCH</option>
				<option value="delete">DELETE</option>
			</select>
			<input type="text" id="endpointUrl" name="endpointUrl" placeholder="Enter the API Endpoing URL here..." />
			<button type="submit" id="sendAPIBtn" name="sendAPIButton">Send API</button>
		</form>
	</div>
	<div class="operationsPanel">
		<div class="operationTabs">
			<button class="tablinks" onclick="openTab(event, 'Params')">Params</button>
			<button class="tablinks" onclick="openTab(event, 'Authorization')">Authorization</button>
			<button class="tablinks" onclick="openTab(event, 'Form Data')">Form Data</button>
		</div>
		<div id="Params" class="tabcontent">
			<span class="closeTab" onclick="closeTab('Params')">X</span>
			<div class="paramsContent" id="paramsHeaders">
				<table class="paramsHeadersTable">
					<thead>
						<tr>
							<th>Key</th>
							<th>Value</th>
							<th>Action</th>
						</tr>
					</thead>
					<tbody id="paramsTableBody">
						<!-- Rows will be dynamically added here -->
					</tbody>
				</table>
			</div>
		</div>

		<div id="Authorization" class="tabcontent">
			<span class="closeTab" onclick="closeTab('Authorization')">X</span>
			<form>
				<label for="authType">Authorization Type : </label>
				<select id="authType" name="authType">
					<option value="noAuth">No Auth</option>
					<option value="basicAuth">Basic Auth</option>
					<option value="bearerToken">Bearer Token</option>
				</select>
			</form>
			<div id="authCredentials" style="display: none;">
				<div class="form-group">
					<label for="username">Username</label>
					<input type="text" id="username" class="form-control" placeholder="Enter Username">
				</div>

				<div class="form-group">
					<label for="password">Password</label>
					<input type="password" id="password" class="form-control" placeholder="Enter Password">
				</div>
			</div>

			<div id="bearerToken" style="display: none;">
				<div class="form-group">
					<label for="token">Token</label>
					<input type="text" id="token" class="form-control" placeholder="Enter Token here">
				</div>
			</div>
		</div>

		<div id="Form Data" class="tabcontent">
			<span class="closeTab" onclick="closeTab('Form Data')">X</span>
			<div class="formDataContent" id="formDataHeaders">
				<table class="formDataTable">
					<thead>
						<tr>
							<th>Key</th>
							<th>Value</th>
							<th>Action</th>
						</tr>
					</thead>
					<tbody id="formDataTableBody">
						<!-- Rows will be dynamically added here -->
					</tbody>
				</table>
			</div>
		</div>
	</div>
	<div class="secondPanel">
		@* <textarea class="requestArea" id="requestData" placeholder="Enter your request payload here..."></textarea> *@
		@* <textarea class="responseArea" id="responseData" placeholder="Response will appear here..." readonly></textarea> *@
		<div class="requestContainer">
			<div class="requestTabs">
				<button class="ReqtabButton Reqactive" onclick="showTabReq('body')">Body</button>
				<button class="ReqtabButton" onclick="showTabReq('headers')">Headers</button>
			</div>
			<div class="requestContent visibleReq" id="requestBody">
				<textarea class="requestArea" id="requestBodyText" placeholder="Enter your request payload here..."></textarea>
			</div>
			<div class="requestContent" id="requestHeaders">
				<table class="requestHeadersTable">
					<thead>
						<tr>
							<th>Key</th>
							<th>Value</th>
							<th>Action</th>
						</tr>
					</thead>
					<tbody id="headersTableBody">
						<!-- Rows will be dynamically added here -->
					</tbody>
				</table>
			</div>
		</div>

		<div class="responseContainer">
			<div class="responseTabs">
				<button class="tabButton active" onclick="showTab('body')">Response Body</button>
				<button class="tabButton" onclick="showTab('headers')">Response Headers</button>
			</div>
			<div class="responseContent visible" id="responseBody">
				<textarea class="responseArea" id="responseBodyText" placeholder="Response body will appear here..." readonly></textarea>
			</div>
			<div class="responseContent" id="responseHeaders">
				<table class="headersTable">
					<thead>
						<tr>
							<th>Key</th>
							<th>Value</th>
						</tr>
					</thead>
					<tbody id="responseHeadersTableBody">
						<tr>
							<td colspan="2">Response headers will appear here...</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
	</div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
	function openTab(evt, tabName) {
	  var i, tabcontent, tablinks;
	  tabcontent = document.getElementsByClassName("tabcontent");
	  for (i = 0; i < tabcontent.length; i++) {
		tabcontent[i].style.display = "none";
	  }
	  tablinks = document.getElementsByClassName("tablinks");
	  for (i = 0; i < tablinks.length; i++) {
		tablinks[i].className = tablinks[i].className.replace(" active", "");
	  }
	  document.getElementById(tabName).style.display = "block";
	  evt.currentTarget.className += " active";
	}
	function closeTab(tabName) {
		document.getElementById(tabName).style.display = "none";
		var tablinks = document.getElementsByClassName("tablinks");
		for (var i = 0; i < tablinks.length; i++) {
			if (tablinks[i].textContent === tabName) {
				tablinks[i].className = tablinks[i].className.replace(" active", "");
			}
		}
	}
	document.getElementById("sendAPIBtn").addEventListener("click", async function (event) {
		event.preventDefault();
		let apiUrl = document.getElementById("endpointUrl").value.trim();
		let requestData = document.querySelector(".requestArea").value.trim();
		let selectedMethod = document.getElementById("httpMethods").value;
		let headersTableBody = document.getElementById('responseHeadersTableBody');
		const headers =
		{
			"Content-Type": "application/json",
			...getRequestHeaders(),
			...getAuthDetails()
		}
		console.log("Headers" + headers);
		headersTableBody.innerHTML = '<tr><td colspan="2">Loading...</td></tr>';

		if (!apiUrl.trim()) {
			console.error("Endpoint URL is required");
			document.querySelector(".responseArea").value = "Error: Endpoint URL is required.";
			return;
		}
		try {
			let response = null;
			if(selectedMethod.toLowerCase() === "post")
			{
				response = await fetch("/Home/CallExternalAPIPost", {
				method: selectedMethod.toUpperCase(),
				headers:{
					"Content-Type": "application/json"
				},
				body: JSON.stringify({
					endpointUrl: apiUrl,
					payload: requestData,
					httpMethod: selectedMethod.toUpperCase(),
					headers: headers
				})
			});
				let responseText = await response.text();
				let parts = responseText.split("###BODY###");

				if (parts.length < 2) {
					console.error("Invalid response format");
					return;
				}

				let headersSection = parts[0].replace("###HEADERS###", "").trim();
				let bodySection = parts[1].trim();
					//let responseData = await response.content;
					//console.log("Response received:", responseData);
				JsonFormatting(bodySection);
				RespHeadersLoading(headersSection,headersTableBody);
			}
			else if(selectedMethod.toLowerCase() === "put")
			{
				response = await fetch("/Home/CallExternalAPIPut", {
				method: selectedMethod.toUpperCase(),
				headers: {
					"Content-Type": "application/json"
				},
				body: JSON.stringify({
					endpointUrl: apiUrl,
					payload: requestData,
					httpMethod: selectedMethod.toUpperCase(),
					headers: headers
				})
			});
				// let responseData = await response.text();
				// 	console.log("Response received:", responseData);
				// 	JsonFormatting(responseData);
				let responseText = await response.text();
				let parts = responseText.split("###BODY###");

				if (parts.length < 2) {
					console.error("Invalid response format");
					return;
				}

				let headersSection = parts[0].replace("###HEADERS###", "").trim();
				let bodySection = parts[1].trim();
				//let responseData = await response.content;
				//console.log("Response received:", responseData);
				JsonFormatting(bodySection);
				RespHeadersLoading(headersSection,headersTableBody);
			}
			else if(selectedMethod.toLowerCase() === "patch")
			{
				response = await fetch("/Home/CallExternalAPIPatch", {
				method: selectedMethod.toUpperCase(),
				headers: {
					"Content-Type": "application/json"
				},
				body: JSON.stringify({
					endpointUrl: apiUrl,
					payload: requestData,
					httpMethod: selectedMethod.toUpperCase(),
					headers: headers
				})
			});
			// let responseData = await response.text();
			// 	console.log("Response received:", responseData);
			// 	JsonFormatting(responseData);
				let responseText = await response.text();
				let parts = responseText.split("###BODY###");

				if (parts.length < 2) {
					console.error("Invalid response format");
					return;
				}

				let headersSection = parts[0].replace("###HEADERS###", "").trim();
				let bodySection = parts[1].trim();
				//let responseData = await response.content;
				//console.log("Response received:", responseData);
				JsonFormatting(bodySection);
				RespHeadersLoading(headersSection,headersTableBody);
			}
			else if(selectedMethod.toLowerCase() === "get")
			{
				response = await fetch(`/Home/CallExternalAPIGet?endpointUrl=${encodeURIComponent(apiUrl)}`,
				{
					method: selectedMethod.toUpperCase()
				});
				//let responseData = await response.text();
				let responseText = await response.text();
				let parts = responseText.split("###BODY###");

				if (parts.length < 2) {
					console.error("Invalid response format");
					return;
				}

				let headersSection = parts[0].replace("###HEADERS###", "").trim();
				let bodySection = parts[1].trim();
				//let responseData = await response.content;
				//console.log("Response received:", responseData);
				console.log("Response received:", bodySection);
				JsonFormatting(bodySection);
				RespHeadersLoading(headersSection,headersTableBody);
			}
			else if(selectedMethod.toLowerCase() === "delete")
			{
				response = await fetch(`/Home/CallExternalAPIDelete?endpointUrl=${encodeURIComponent(apiUrl)}`,
				{
					method: selectedMethod.toUpperCase()
				});
				let responseText = await response.text();
				let parts = responseText.split("###BODY###");

				if (parts.length < 2) {
					console.error("Invalid response format");
					return;
				}

				let headersSection = parts[0].replace("###HEADERS###", "").trim();
				let bodySection = parts[1].trim();
				//let responseData = await response.content;
				//console.log("Response received:", responseData);
				console.log("Response received:", bodySection);
				JsonFormatting(bodySection);
				RespHeadersLoading(headersSection,headersTableBody);
			}
		} catch (error) {
			document.querySelector(".responseArea").value = "Error: " + error.message;
		}
	});
	function JsonFormatting(jsonVal)
	{
		try {
			let formattedJson = JSON.stringify(JSON.parse(jsonVal), null, 4);
			document.querySelector(".responseArea").value = formattedJson;
		} catch (error) {
			document.querySelector(".responseArea").value = jsonVal;
		}
	}
	function showTab(tab) {
		// Hide all content
		document.getElementById('responseBody').classList.remove('visible');
		document.getElementById('responseHeaders').classList.remove('visible');
		document.querySelectorAll('.tabButton').forEach(btn => btn.classList.remove('active'));

		// Show selected tab content
		if (tab === 'body') {
			document.getElementById('responseBody').classList.add('visible');
			document.querySelectorAll('.tabButton')[0].classList.add('active');
		} else {
			document.getElementById('responseHeaders').classList.add('visible');
			document.querySelectorAll('.tabButton')[1].classList.add('active');
		}
	}
	function showTabReq(tab) {
		// Hide all content
		document.getElementById('requestBody').classList.remove('visibleReq');
		document.getElementById('requestHeaders').classList.remove('visibleReq');
		document.querySelectorAll('.ReqtabButton').forEach(btn => btn.classList.remove('Reqactive'));

		// Show selected tab content
		if (tab === 'body') {
			document.getElementById('requestBody').classList.add('visibleReq');
			document.querySelectorAll('.ReqtabButton')[0].classList.add('Reqactive');
		} else {
			document.getElementById('requestHeaders').classList.add('visibleReq');
			document.querySelectorAll('.ReqtabButton')[1].classList.add('Reqactive');
		}
	}
	function RespHeadersLoading(headersSection,headersTableBody)
	{
		headersTableBody.innerHTML = ""; // Clear previous headers
		let headers = {};
		headersSection.split("\n").forEach(line => {
		let [key, value] = line.split(": ");
			if (key && value) headers[key.trim()] = value.trim();
		});

				// Iterate over the headers object and add rows to the table
		for (let key in headers) {
			let row = `<tr><td>${key}</td><td>${headers[key]}</td></tr>`;
			headersTableBody.innerHTML += row;
		}

		// If no headers were found, show a message
		if (headersTableBody.innerHTML.trim() === "") {
			headersTableBody.innerHTML = '<tr><td colspan="2">No headers received</td></tr>';
		}
	}
	document.addEventListener("DOMContentLoaded", function () {
		const headersTableBody = document.getElementById("headersTableBody");

		function addNewRow() {
			let row = document.createElement("tr");

			row.innerHTML = `
				<td><input type="text" class="header-key" placeholder="Key"></td>
				<td><input type="text" class="header-value" placeholder="Value"></td>
				<td><button class="delete-row">🗑️</button></td>
			`;

			headersTableBody.appendChild(row);

			// Add event listeners
			row.querySelector(".header-key").addEventListener("input", checkAndAddRow);
			row.querySelector(".header-value").addEventListener("input", checkAndAddRow);
			row.querySelector(".delete-row").addEventListener("click", function () {
				removeRow(row);
			});
		}

		function checkAndAddRow() {
			let lastRow = headersTableBody.lastElementChild;
			let keyInput = lastRow.querySelector(".header-key").value.trim();
			let valueInput = lastRow.querySelector(".header-value").value.trim();

			if (keyInput !== "" || valueInput !== "") {
				addNewRow();
			}
		}

		function removeRow(row) {
			if (headersTableBody.children.length > 1) {
				row.remove();
			}
		}

		// Initially, add one empty row
		addNewRow();
	});
	document.addEventListener("DOMContentLoaded", function () {
		const headersTableBody = document.getElementById("paramsTableBody");

		function addNewRow() {
			let row = document.createElement("tr");

			row.innerHTML = `
				<td><input type="text" class="header-key" placeholder="Key"></td>
				<td><input type="text" class="header-value" placeholder="Value"></td>
				<td><button class="delete-row">🗑️</button></td>
			`;

			headersTableBody.appendChild(row);

			// Add event listeners
			row.querySelector(".header-key").addEventListener("input", checkAndAddRow);
			row.querySelector(".header-value").addEventListener("input", checkAndAddRow);
			row.querySelector(".delete-row").addEventListener("click", function () {
				removeRow(row);
			});
		}

		function checkAndAddRow() {
			let lastRow = headersTableBody.lastElementChild;
			let keyInput = lastRow.querySelector(".header-key").value.trim();
			let valueInput = lastRow.querySelector(".header-value").value.trim();

			if (keyInput !== "" || valueInput !== "") {
				addNewRow();
			}
		}

		function removeRow(row) {
			if (headersTableBody.children.length > 1) {
				row.remove();
			}
		}

		// Initially, add one empty row
		addNewRow();
	});

	document.addEventListener("DOMContentLoaded", function () {
		const headersTableBody = document.getElementById("formDataTableBody");

		function addNewRow() {
			let row = document.createElement("tr");

			row.innerHTML = `
				<td><input type="text" class="header-key" placeholder="Key"></td>
				<td><input type="text" class="header-value" placeholder="Value"></td>
				<td><button class="delete-row">🗑️</button></td>
			`;

			headersTableBody.appendChild(row);

			// Add event listeners
			row.querySelector(".header-key").addEventListener("input", checkAndAddRow);
			row.querySelector(".header-value").addEventListener("input", checkAndAddRow);
			row.querySelector(".delete-row").addEventListener("click", function () {
				removeRow(row);
			});
		}

		function checkAndAddRow() {
			let lastRow = headersTableBody.lastElementChild;
			let keyInput = lastRow.querySelector(".header-key").value.trim();
			let valueInput = lastRow.querySelector(".header-value").value.trim();

			if (keyInput !== "" || valueInput !== "") {
				addNewRow();
			}
		}

		function removeRow(row) {
			if (headersTableBody.children.length > 1) {
				row.remove();
			}
		}

		// Initially, add one empty row
		addNewRow();
	});
	function getRequestHeaders() {
		const headers = {};
		document.querySelectorAll("#headersTableBody tr").forEach(row => {
			const key = row.querySelector(".header-key")?.value.trim();
			const value = row.querySelector(".header-value")?.value.trim();
			if (key && value) { // Only add non-empty keys and values
				headers[key] = value;
			}
		});
		console.log("Extracted Headers:", headers);
		return headers;
	}
		function getAuthDetails() {
			let authType = $('#authType').val();

			if (authType === 'basicAuth') {
				let username = $('#username').val();
				let password = $('#password').val();

				if (username && password) {
					return {
						"Authorization": "Basic " + btoa(username + ":" + password)
					};
				}
			} else if (authType === 'bearerToken') {
				let token = $('#token').val();

			if (token) {
				return {
					"Authorization": "Bearer " + token
				};
			}
		}
		return {}; // Return an empty object if no authentication is selected
	}


	$(document).ready(function () {
		console.log("jQuery Loaded - Ready Function Called");

		$('#authType').on('change', function () {
			console.log("Dropdown Changed: " + $(this).val());

			if ($(this).val() === 'basicAuth') {
				$('#authCredentials').fadeIn();
				$('#bearerToken').fadeOut();
				console.log("Showing Username & Password Fields");
			} else if($(this).val() === 'bearerToken')
			{
				$('#bearerToken').fadeIn();
				$('#authCredentials').fadeOut();
				console.log("Showing Bearer Token Fields");
			}
			else {
				$('#authCredentials').fadeOut();
				$('#bearerToken').fadeOut();
				console.log("Hiding Username & Password Fields");
			}
		});
	});
</script>



